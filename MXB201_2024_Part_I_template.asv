% Template for MXB201 Project Part I.

%% Initialisation
clear
load partI

[X,Y,num_dirs] = size(S);
assert(isequal(size(g), [num_dirs 3]));

% These arrays will be be filled in during the main loop below
MD  = nan(X, Y);    % mean diffusion
FA  = nan(X, Y);    % fractional anistropy
PDD = nan(X, Y, 3); % principal diffusion direction

% Any other initialisation needed here
% Removing any negative values in the data
S0 = abs(S0);
S = abs(S);

A = [g(:,1).^2  g(:,2).^2  g(:,3).^2  2.*g(:,1).*g(:,2)  2.*g(:,1).*g(:,3)  2.*g(:,2).*g(:,3)];


%% Compute the diffusion tensor for each pixel
for x = 1:X
    for y = 1:Y

        % If not within the mask, skip the pixel
        if ~mask(x, y), continue; end
        
        % Solving least squares problem
        B = log(S(x,y,:)/S0(x,y))/(-b);
        % B is 1x1x64 but should be 1x64 
        B = squeeze(B);        
        
        % Returns 1x6 matrix of important parts of D 
        D_i = A\B;       
        D_i = D_i';
        % Forming diffusion tensor

        % Constructing D from D_i
        D = [D_i(1,1) D_i(1,4) D_i(1,5);
            D_i(1,4) D_i(1,2) D_i(1,6); 
            D_i(1,5) D_i(1,6) D_i(1,3)];

        % Finding eigenvalues and eigenvectors
        D_values = eig(D);
        

        % Calculating MD, FA and PDD

        % MD
        sum_eigenvalues = sum(D_values);
        CMD = sum_eigenvalues/3;
        MD(x,y) = CMD;
        
        % Fractional anistropy
        FA_sq = ((D_values(1)-D_values(2))^2 + (D_values(2)-D_values(3))^2 + (D_values(1)-D_values(3))^2 ) / (2*(D_values(1).^2 + D_values(2).^2 + D_values(3).^2));
        FA(x,y) = sqrt(FA_sq);          

        %PDD
        [D_e, throwaway] = eig(D);
        [D_values, I] = sort(D_values, 'descend');
        D_e = D_e(I);
        principle_eigenvector = D_e(1);
        

    end
end

%% Plot mean diffusivity, fractional anisotropy and principal diffusion direction maps
threshold_mask = MD >= 0.1*max(MD, [], 'all');  % setting a threshold of 10% of the max value
MD = MD.*threshold_mask;

threshold_mask = FA >= 0.1*max(FA, [], 'all');  % setting a threshold of 10% of the max value
FA = FA.*threshold_mask;

figure, imshow(MD, [])
figure, imshow(FA, [])